---
import Footer from "../components/footer.astro";
import Navbar from "../components/navbar.astro";
import "../../public/global.css";
import { ClientRouter } from "astro:transitions";

const {NavBarData ,FootData}= Astro.props
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<link rel="icon" type="image/png" href="/favicon-96x96.png" sizes="96x96" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
		<meta name="apple-mobile-web-app-title" content="Berbat Photos" />
		<link rel="manifest" href="/site.webmanifest" />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Satisfy&display=swap" rel="stylesheet">
		<meta name="google-site-verification" content="3zqDMU14MAapH-oPmoASfZMFniwMYWxJ1_ycjVvVbdE" />

		<meta name="generator" content={Astro.generator} />
		<slot name='head' />
		<title>Berbat Photos</title>
		<ClientRouter />
	</head>
	<body 
		class="bg-white min-h-screen"
		x-init="$store.service.fetchServices"	
	>
		<Navbar Data={NavBarData}/>
		<slot />
		<Footer Data={FootData}/>
	</body>
</html>
<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}
</style>
<script>
	import Alpine from "alpinejs";
	import { animate, inView } from "motion";
	window.Alpine = Alpine;
	document.addEventListener('alpine:init', () => {
	    Alpine.data('navbarData', () => {
	        return {
				mobile:false,
        		setMobile(){
        		    if(document.documentElement.clientWidth<1024){
        		        return this.mobile=true
        		    }else{
        		        return this.mobile=false
        		    }
        		},
	            growText(element:any){
	                animate(`#${element.target.id}`,{ scale:1.1})
	            },
	            shrinkText(element:any){
	                animate(`#${element.target.id}`,{ scale:1})
	            },
	            handleMainLinkOn(element:any){
	                animate(`#${element.target.nextElementSibling.id}`,{ scaleX: [0, 1] },{ duration: 0.2, ease: ["easeIn", "easeOut"]  })
	            },
	            handleMainLinkOff(element:any){
	                animate(`#${element.target.nextElementSibling.id}`,{ scaleX: [1, 0] },{ duration: 0.2, ease: ["easeIn", "easeOut"]  })
	            }
	        }
	    });
	    Alpine.data('footerData', () => {
	        return {
	            grow(element:any){
	                animate(`#${element.target.id}`,{ scale:1.1})
	            },
	            shrink(element:any){
	                animate(`#${element.target.id}`,{ scale:1})
	            },
	        }
	    });
	    Alpine.data('dropdown', () => {
	        return {
	            open: false,
	    		get isOpen() {
	      			return this.open;
	    		},
	    		toggle() {
	      			this.open = !this.open;
	                if(this.open==true){
	                    animate(".arrow-icon",{rotate:180})
	                    this.underlineOn()
	                }else{
	                    animate(".arrow-icon",{rotate:360})
	                    this.underlineOff()
	                }
	    		},
	            underlineOn(){
	                this.open=true
	                animate(".arrow-icon",{rotate:180})
	                animate(`#linkPages`,{ scaleX: [0, 1] },{ duration: 0.2, ease: ["easeIn", "easeOut"]  })
	            },
	            underlineOff(){
	                animate(`#linkPages`,{ scaleX: [1, 0] },{ duration: 0.2, ease: ["easeIn", "easeOut"]  })
	            },
	            growText(element:any){
	                animate(`#${element.target.id}`,{ scale:1.2})
	            },
	            shrinkText(element:any){
	                animate(`#${element.target.id}`,{ scale:1})
	            },
	        }
	    });
	    Alpine.data('bookCardData', () => {
	        return {
	            dropdownOpen:false,
	            get isdropdownOpen() {
	                return this.dropdownOpen;
	    		},
	    		arrowToggle() {
	                this.dropdownOpen = !this.dropdownOpen;
	                if(this.dropdownOpen==true){ 
	                    animate("#bookingCardArrowIcon",{rotate:180})
	                }else{
	                    animate("#bookingCardArrowIcon",{rotate:360})
	                }
	    		},
	        }
	    });
	    Alpine.data('priceCards',()=>{
	        return{
				init() {
					inView(".serviceCardContainer",(element)=>{
        			    animate(element,{opacity:[0, 1], y:[100,0]},{ delay:0.6, duration:0.5})
        			})
				},
	            showDetails:false,
	            toggleShowDetails(index:any){
					const card:any=document.getElementById(`cardPriceMainImage${index}`) 
	                this.showDetails=!this.showDetails;
	                if(this.showDetails==true){
	                    card.style.width="415px"
	                }else{
	                    card.style.width="828px"
	                }
	            },
				toggleShowDetailsTablet(){
	                this.showDetails=!this.showDetails
				},
				scrollContainer(event:any){
					event.preventDefault();
					const speedMultiplier = 4; // 2x scroll speed
					const container = event.currentTarget;
      				container.scrollLeft += event.deltaY*speedMultiplier;
				},
				scrollContainerMobile(event:any){
					const container = event.currentTarget;
  					const atHorizontalLimit =
  					  (event.deltaY < 0 && container.scrollLeft === 0) ||
  					  (event.deltaY > 0 && container.scrollLeft + container.clientWidth >= container.scrollWidth);
									
  					// If horizontal scroll is possible, scroll it
  					if (!atHorizontalLimit) {
  					  event.preventDefault();
  					  const speedMultiplier = 2;
  					  container.scrollLeft += event.deltaY * speedMultiplier;
  					}
  					// Else, allow normal vertical scrolling (no preventDefault)
				}
	        }
	    });
		Alpine.data('gallery', () => {
			return {
				showModal: false,
				isLoading: true,
				modalImage: '',
				images: [] as object[],
				handleModal(element:any) {
					this.showModal = !this.showModal;
					animate('#modalImage', { opacity: [0, 1], scale: [0.5, 1] }, { duration: 0.2, ease: ['easeOut'] });
					this.modalImage = element.target.src;
				},
				async fetchGalleryImages(galleryName:any) {
					let images = [];
				
					if (galleryName === 'mywork') {
						const response = await fetch('/api/myworkImages.json');
						if (response.ok) {
							images = await response.json();
						}
					} else if (galleryName === 'landscape') {
						const response = await fetch('/api/landscapeImages.json');
						console.log(response)
						if (response.ok) {
							images = await response.json();
						}
					}
				
					this.images = await images.map((data:any) => {
						const httpsUrl = data.url.replace('http://', 'https://');
					
						return {
							...data,
							url: httpsUrl,
							webpUrl: httpsUrl.replace('/upload/', '/upload/w_800,f_auto,q_auto/'),
						};
					});
					this.isLoading = false
				}
			};
		});

		Alpine.data('burgerMenu',()=>{
			return{
				open:false,
				toggle() {
	      			this.open = !this.open;
	    		},
			}
		});
		Alpine.data('shoppingBag',()=>{
			return{
				showModal:false,
				handleModal(){
					this.showModal = !this.showModal;
				},
			}
		})
		Alpine.store('display',{
			init(this:{setDisplay:Function,setCardsDisplay:Function}) {
				this.setDisplay()
				this.setCardsDisplay()
			},
			screen:"desktop",
			serviceCardsDisplay:"desktop",
			setDisplay(this: { screen: string}){
				if(document.documentElement.clientWidth>1024){
                	return this.screen="desktop"
            	}
				if(document.documentElement.clientWidth<1024&&document.documentElement.clientWidth>744){
					return this.screen="tablet"
				}
				if(document.documentElement.clientWidth<744){
					return this.screen="mobile"
				}
			},
			setCardsDisplay(this:{serviceCardsDisplay:string}){
				if(document.documentElement.clientWidth>1450){
					return this.serviceCardsDisplay="desktop"
				}
				if(document.documentElement.clientWidth<1450&&document.documentElement.clientWidth>744){
					return this.serviceCardsDisplay="tablet"
				}
				if(document.documentElement.clientWidth<744){
					return this.serviceCardsDisplay="mobile"
				}
			},
		});
		Alpine.store('service',{
			init(this:{handleCheckboxChange: Function;fetchServices:Function,bookLinkEn:string,bookLinkFr:string}) {
				this.fetchServices()
			},
			bookLinkEn:'/en/booking',
			bookLinkFr:'/fr/reservation',
			servicesEn:[],
			servicesFr:[],
			shopList:[] as any[],
			shopListEn:[],
			shopListFr:[],
			async fetchServices(this:{servicesEn: Array<[any]>, servicesFr: any}){
				const response = await fetch('/api/services.json')
				const data= await response.json()
				this.servicesEn=data.servicesEn
				this.servicesFr=data.servicesFr
				let countEn=0
				let countFr=0
				this.servicesEn.map((cards)=>{
					cards.map((data)=>{
						countEn+=1
						data.id=countEn
					})
				})
				this.servicesFr.map((cards: any[])=>{
					cards.map((data: { id: number; })=>{
						countFr+=1
						data.id=countFr
					})
				})
			},
			addToShopList(this:{shopList:any,setAddContent:Function},elementID: string){
				if (!this.shopList.includes(elementID)) {
					this.shopList.push(elementID);
					this.setAddContent(elementID)
					return
				}
			},
			deleteFromShopList(this:{shopList:any,setDeleteContent:Function},elementID: string){
				this.shopList = this.shopList.filter((id: any) => id !== elementID);
				this.setDeleteContent(elementID)
			},
			setAddContent(this:{shopListEn:any,shopListFr:any,servicesEn:any,servicesFr:any},id:number){
				this.servicesEn.map((cards:any)=>{
					cards.map((data:any)=>{
						if(data.id==id){
							this.shopListEn.push(data)
						}
					})
				})
				this.servicesFr.map((cards:any)=>{
					cards.map((data:any)=>{
						if(data.id==id){
							this.shopListFr.push(data)
						}
					})
				})
			},
			setDeleteContent(this:{shopListEn:any,shopListFr:any,servicesEn:any,servicesFr:any},id:number){
				
				this.shopListEn = this.shopListEn.filter((item: { id: any; }) => item.id !== id);
				this.shopListFr = this.shopListFr.filter((item: { id: any; }) => item.id !== id);
			
			},
			handleCheckboxChange(this: { shopList: string[] ,setAddContent:Function, setDeleteContent:Function}, elementID: string, event: Event) {
				const checkbox = event.target as HTMLInputElement;
				const isChecked = checkbox.checked;
						
				if (isChecked) {
					if (!this.shopList.includes(elementID)) {
						this.shopList.push(elementID);
						this.setAddContent(elementID)
					}
				} else {
					this.shopList = this.shopList.filter(id => id !== elementID);
					this.setDeleteContent(elementID)
				}
			},
		})
	});
</script>